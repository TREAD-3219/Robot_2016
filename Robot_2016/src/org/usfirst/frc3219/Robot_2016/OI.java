// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3219.Robot_2016;

import org.usfirst.frc3219.Robot_2016.commands.FeedShooter;
import org.usfirst.frc3219.Robot_2016.commands.ServoController_SafetyStartPressed;
import org.usfirst.frc3219.Robot_2016.commands.ServoController_SafetyYPressed;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.Button;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc3219.autonomousCommandGroupLibrary.ChivalDeFrise;
import frc3219.autonomousCommandGroupLibrary.Drawbridge;
import frc3219.autonomousCommandGroupLibrary.Moat;
import frc3219.autonomousCommandGroupLibrary.Portcullis;
import frc3219.autonomousCommandGroupLibrary.Ramparts;
import frc3219.autonomousCommandGroupLibrary.RockWall;
import frc3219.autonomousCommandGroupLibrary.RoughTerrain;
import frc3219.autonomousCommandGroupLibrary.SallyPort;
import frc3219.autonomousLibrary.AutoShoot;



/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
	public boolean safetyYPressed_value;
	public boolean safetyStartPressed_value;
	//// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
//    // button.whenPressed(new ExampleCommand()); 

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
//    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public Joystick driveStick;
    public JoystickButton shoot;
    public Joystick joystick;
    public JoystickButton shoot_Alt;
    public Joystick gameController;
    public Button buttonY;
    public Button buttonStart;
    public SendableChooser AutoStartPosition;
    public SendableChooser AutoDefenseChooser;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    	driveStick = new Joystick(0);
        gameController = new Joystick(1);
        joystick = new Joystick(0);
        
        shoot_Alt = new JoystickButton(gameController, 1);
        
        Button buttonB = new JoystickButton(gameController, 2);
        Button buttonA = new JoystickButton(gameController, 1);
        Button buttonX = new JoystickButton(gameController, 3);
        buttonY = new JoystickButton(gameController, 4);
        buttonStart = new JoystickButton(gameController, 8);
        
        shoot = new JoystickButton(joystick, 1);
        //buttonB.whileHeld(new RollerMotor());
        buttonA.whileHeld(new FeedShooter());
        buttonX.whenPressed(new AutoShoot());
        
        
        
        
        //Start button
        buttonStart.whileHeld(new ServoController_SafetyStartPressed());
         //Y Button
        buttonY.whileHeld(new ServoController_SafetyYPressed());
        
        
        
        
        
        

        //SmartDashboard Autonomous Choosers
        AutoStartPosition = new SendableChooser();
       //AutoStartPosition.addDefault("Position A", new AutoTurnAndShoot());
       //SmartDashboard.putData("Position A", AutoStartPosition);
       //AutoStartPosition.addObject("Position B", new AutoTurnAndShoot());
       //SmartDashboard.putData("Position B", AutoStartPosition);
       //AutoStartPosition.addObject("Position C", new AutoTurnAndShoot());
       //SmartDashboard.putData("Position C", AutoStartPosition);
       //AutoStartPosition.addObject("Position D", new AutoTurnAndShoot());
       //SmartDashboard.putData("Position D", AutoStartPosition);
        
        AutoDefenseChooser = new SendableChooser();
        AutoDefenseChooser.addDefault("Rough Terrain", new RoughTerrain());
        SmartDashboard.putData("Rough Terrain", AutoStartPosition);
        AutoDefenseChooser.addObject("Rock Wall", new RockWall());
        SmartDashboard.putData("Rock Wall", AutoStartPosition);
        AutoDefenseChooser.addObject("Portcullis", new Portcullis());
        SmartDashboard.putData("Portcullis", AutoStartPosition);
        AutoDefenseChooser.addObject("Moat", new Moat());
        SmartDashboard.putData("Moat", AutoStartPosition);
        AutoDefenseChooser.addObject("Ramparts", new Ramparts());
        SmartDashboard.putData("Ramparts", AutoStartPosition);
        AutoDefenseChooser.addObject("Sally Port", new SallyPort());
        SmartDashboard.putData("Sally Port", AutoStartPosition);
        AutoDefenseChooser.addObject("Drawbridge", new Drawbridge());
        SmartDashboard.putData("Drawbridge", AutoStartPosition);
        AutoDefenseChooser.addObject("Chival de Frise", new ChivalDeFrise());
        SmartDashboard.putData("Chival de Frise", AutoStartPosition);
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        //user input :)
        
        
        //Start button
        buttonStart.whileHeld(new ServoController_SafetyStartPressed());
        //Y Button
        buttonY.whileHeld(new ServoController_SafetyYPressed());
        
        
    }

    
    
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick() {
        return joystick;
    }

    public Joystick getGameController() {
        return gameController;
    }
    
    public Joystick getDriveStick(){
    	return driveStick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

