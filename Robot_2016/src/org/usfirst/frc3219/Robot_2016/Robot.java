// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3219.Robot_2016;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3219.Robot_2016.commands.*;
import org.usfirst.frc3219.Robot_2016.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Drive drive; 
    public static Shooter shooter;
    public static FeedMech feedMech;
    public static MultiTool multiTool;
    public static Climber climber;
    public static Sensors sensors;
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drive = new Drive();
        shooter = new Shooter();
        feedMech = new FeedMech();
        multiTool = new MultiTool(0, 0, 0);
        climber = new Climber();
        sensors = new Sensors();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        autonomousCommand = new GoForward5Feet();
        //Autonomous smartdashboard positioning
        SmartDashboard.putString("Obstacle 1", null);
        SmartDashboard.putString("Obstacle 2", null);
        SmartDashboard.putString("Obstacle 3", null);
        SmartDashboard.putString("Obstacle 4", null);
        SmartDashboard.putNumber("Robot Position", 0);

    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){
    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
    	Scheduler.getInstance().add(new AutoNavigation());
    	Scheduler.getInstance().add(new AutoChivalDeFrise());
    	
        if (autonomousCommand != null) autonomousCommand.start();
        String[] obstacles = new String[4];
        obstacles[0] = SmartDashboard.getString("Obstacle 1");
        obstacles[1] = SmartDashboard.getString("Obstacle 2");
        obstacles[2] = SmartDashboard.getString("Obstacle 3");
        obstacles[3] = SmartDashboard.getString("Obstacle 4");
        double robotPosition = SmartDashboard.getNumber("Robot Position");
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        JoystickDrive joystickDrive = new JoystickDrive();
        Scheduler.getInstance().add(joystickDrive);
        
        MultiToolMover multiTool = new MultiToolMover();
        Scheduler.getInstance().add(multiTool);
        
        Scheduler.getInstance().add(new WatchSensors());
        Scheduler.getInstance().add(new EnableClimberButtons());
        Scheduler.getInstance().add(new ServoController());
        
        Scheduler.getInstance().add(new DeadReckoningChecks());
        Scheduler.getInstance().add(new CheckSpeed());
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        //System.out.println(SmartDashboard.getNumber("Lidar1", sensors.readUltraSonic1()) + "!");
        //SmartDashboard.putNumber("lidar check", SmartDashboard.getNumber("Lidar1"));
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
