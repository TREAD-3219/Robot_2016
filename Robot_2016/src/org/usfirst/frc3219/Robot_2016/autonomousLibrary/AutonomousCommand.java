// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3219.Robot_2016.autonomousLibrary;

import org.usfirst.frc3219.Robot_2016.Robot;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

public class AutonomousCommand extends Command {
	private double distanceStart = 0.0;
	private double speedPercent = 0.25;
	private double distanceWanted = 90.0;
	private double speedSum = 0.0;
	private int speedCounts = 0;

	public AutonomousCommand() {
		// Use requires() here to declare subsystem dependencies
		// eg. requires(chassis);

		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		SmartDashboard.putNumber("Auto Speed %", speedPercent);
		SmartDashboard.putNumber("Recorded Speed", 0.0);
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		speedSum = 0;
		speedCounts = 0;
		distanceStart = Robot.sensors.getAvgEncoderDist();
		speedPercent = SmartDashboard.getNumber("Auto Speed %");
		double speed = Robot.drive.speedFromPower(speedPercent);
		double timeout = (distanceWanted / speed) + 0.1;
		SmartDashboard.putNumber("Auto Timeout", timeout);
		this.setTimeout(timeout);
		Robot.drive.setSafety(false);
		Robot.drive.driveValues(speedPercent, 0.0);
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		double speed = Robot.sensors.getVelocity();
		speedCounts += 1;
		speedSum += speed;
		SmartDashboard.putNumber("Recorded Speed", speedSum / speedCounts);
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		double distanceNow = Robot.sensors.getAvgEncoderDist();
		double distance = distanceNow - distanceStart;
		return (distance >= distanceWanted) || this.isTimedOut();
	}

	// Called once after isFinished returns true
	protected void end() {
		Robot.drive.setSafety(true);
		Robot.drive.driveValues(0.0, 0.0);
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		this.end();
	}
}
