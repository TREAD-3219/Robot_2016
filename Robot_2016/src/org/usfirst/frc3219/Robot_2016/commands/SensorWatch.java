// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3219.Robot_2016.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc3219.Robot;
import frc3219.subsystems.Orientation_UM7.Vec;
import frc3219.subsystems.Sensors;

/**
 *
 */
public class  SensorWatch extends Command {

    public SensorWatch() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    	requires(Robot.sensors);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	postSensorData();
    }

	public static void postSensorData() {
		Sensors sensors = Robot.sensors;
		SmartDashboard.putNumber("Lidar1", sensors.readLidar1());
		SmartDashboard.putNumber("Lidar2", sensors.readLidar2());
    	SmartDashboard.putNumber("Left Distance", sensors.leftEncoderDistance());
    	SmartDashboard.putNumber("Left Speed", sensors.leftEncoderSpeed());
    	SmartDashboard.putNumber("Right Distance", sensors.rightEncoderDistance());
    	SmartDashboard.putNumber("Right Speed", sensors.rightEncoderSpeed());
    	SmartDashboard.putNumber("Distance", sensors.getDistance());
    	SmartDashboard.putNumber("Speed", sensors.getVelocity());
    	SmartDashboard.putNumber("LeftRaw", sensors.leftEncoderRaw());
    	SmartDashboard.putNumber("RightRaw", sensors.rightEncoderRaw());
    	SmartDashboard.putNumber("Encoder Theta", sensors.getTheta());
    	SmartDashboard.putNumber("Velocity Theta", sensors.getThetaDot());
    	SmartDashboard.putNumber("Max Theta", sensors.getMaxTheta());

    	SmartDashboard.putNumber("Voltage", sensors.getVoltage());
    	SmartDashboard.putNumber("Current", sensors.getCurrent());
    	SmartDashboard.putNumber("LeftMotor", sensors.getLeftMotorCurrent());
    	SmartDashboard.putNumber("RightMotor", sensors.getRightMotorCurrent());
    	SmartDashboard.putNumber("Power", sensors.getPower());
    	SmartDashboard.putNumber("Energy Used", sensors.getEnergyUsed());
    	SmartDashboard.putNumber("PDP Temp", sensors.getPDPTemperature());
    	
    	SmartDashboard.putNumber("UM7 packets", sensors.um7PacketsRead());
    	SmartDashboard.putNumber("Yaw", sensors.getEulerYaw());
    	SmartDashboard.putNumber("Compass", sensors.getCompass());
    	Vec accel = sensors.getAccel();
    	SmartDashboard.putNumber("X accel", accel.getX());
    	SmartDashboard.putNumber("Y accel", accel.getY());
    	SmartDashboard.putNumber("Z accel", accel.getZ());
    	Vec mag = sensors.getMagnetometer();
    	SmartDashboard.putNumber("X mag", mag.getX());
    	SmartDashboard.putNumber("Y mag", mag.getY());
    	SmartDashboard.putNumber("Z mag", mag.getZ());
    	SmartDashboard.putBoolean("UM7 Error", !sensors.um7().hasError());
    	SmartDashboard.putBoolean("UM7 CmdFailed", !sensors.um7().commandFailed());
    	SmartDashboard.putBoolean("UM7 overflow", !sensors.um7().hasReadOverflow());
    	SmartDashboard.putBoolean("gyro failure", !sensors.um7().gyroStartupFailure());
    	SmartDashboard.putBoolean("accelerometer failure", !sensors.um7().accelerometerStartupFailure());
	}

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
